// <auto-generated />
using System;
using Catalog.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("DefaultQuestionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("default_question_number");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HideResult")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_result");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("MinusScorePerQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("minus_score_per_question");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PercentageToPass")
                        .HasColumnType("integer")
                        .HasColumnName("percentage_to_pass");

                    b.Property<int>("PlusScorePerQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("plus_score_per_question");

                    b.Property<bool>("ShowAllQuestion")
                        .HasColumnType("boolean")
                        .HasColumnName("show_all_question");

                    b.Property<int>("ShufflingExams")
                        .HasColumnType("integer")
                        .HasColumnName("shuffling_exams");

                    b.Property<int>("TimePerQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("time_per_question");

                    b.Property<bool>("ViewNextQuestion")
                        .HasColumnType("boolean")
                        .HasColumnName("view_next_question");

                    b.Property<bool>("ViewPassQuestion")
                        .HasColumnType("boolean")
                        .HasColumnName("view_pass_question");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.ToTable("exams", "cat");

                    b.HasData(
                        new
                        {
                            Id = "f46d018a-63c3-4e83-a7e9-b381dcae9cd1",
                            Code = "f46d018a-63c3-4e83-a7e9-b381dcae9cd1",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3420),
                            DefaultQuestionNumber = 25,
                            Description = "Level A1 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level A1 Driving Test",
                            PercentageToPass = 84,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "86f6bf50-a466-4ae8-a1f4-7bfbaf8b0e96",
                            Code = "86f6bf50-a466-4ae8-a1f4-7bfbaf8b0e96",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3430),
                            DefaultQuestionNumber = 25,
                            Description = "Level A2 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level A2 Driving Test",
                            PercentageToPass = 92,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "ec00060f-ef87-47d8-8ddc-873d2aa81add",
                            Code = "ec00060f-ef87-47d8-8ddc-873d2aa81add",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3436),
                            DefaultQuestionNumber = 25,
                            Description = "Level A3 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level A3 Driving Test",
                            PercentageToPass = 92,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "5bf3cd2b-40f2-41f0-804f-1febe6d25863",
                            Code = "5bf3cd2b-40f2-41f0-804f-1febe6d25863",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3441),
                            DefaultQuestionNumber = 25,
                            Description = "Level A4 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level A4 Driving Test",
                            PercentageToPass = 92,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "2bacd63b-a302-42e9-acf8-8eb165a5e135",
                            Code = "2bacd63b-a302-42e9-acf8-8eb165a5e135",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3447),
                            DefaultQuestionNumber = 30,
                            Description = "Level B1 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level B1 Driving Test",
                            PercentageToPass = 90,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "46a4af13-d57a-4dab-9cfa-2247be54be4a",
                            Code = "46a4af13-d57a-4dab-9cfa-2247be54be4a",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3457),
                            DefaultQuestionNumber = 35,
                            Description = "Level B2 Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level B2 Driving Test",
                            PercentageToPass = 91,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "4311838a-c6b2-467c-836d-0237bb196cbe",
                            Code = "4311838a-c6b2-467c-836d-0237bb196cbe",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3463),
                            DefaultQuestionNumber = 40,
                            Description = "Level C Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level C Driving Test",
                            PercentageToPass = 90,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "3a6e1576-43af-4dde-b894-27f28d460084",
                            Code = "3a6e1576-43af-4dde-b894-27f28d460084",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3468),
                            DefaultQuestionNumber = 45,
                            Description = "Level D Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level D Driving Test",
                            PercentageToPass = 91,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "45959950-fcab-4793-b1ce-422d102aa50b",
                            Code = "45959950-fcab-4793-b1ce-422d102aa50b",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3474),
                            DefaultQuestionNumber = 45,
                            Description = "Level E Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level E Driving Test",
                            PercentageToPass = 91,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        },
                        new
                        {
                            Id = "3cc9c957-c7a1-455e-ad88-43e8f6157695",
                            Code = "3cc9c957-c7a1-455e-ad88-43e8f6157695",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(3479),
                            DefaultQuestionNumber = 45,
                            Description = "Level F Driving Test",
                            HideResult = false,
                            MinusScorePerQuestion = 0,
                            Name = "Level F Driving Test",
                            PercentageToPass = 91,
                            PlusScorePerQuestion = 0,
                            ShowAllQuestion = false,
                            ShufflingExams = 0,
                            TimePerQuestion = 0,
                            ViewNextQuestion = false,
                            ViewPassQuestion = false
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.ExamResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("NumberOfCorrectAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_correct_answer");

                    b.Property<string>("ResultStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result_status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_exam_results");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_results_exam_id");

                    b.ToTable("examResults", "cat");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.QuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("ExamResultId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_result_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ExamResultId")
                        .HasDatabaseName("ix_question_answers_exam_result_id");

                    b.ToTable("questionAnswers", "cat");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.QuestionExam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_question_exam");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_exam_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_exam_question_id");

                    b.ToTable("question_exam", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_schedules_exam_id");

                    b.ToTable("schedules", "cat");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("AllowShuffle")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_shuffle");

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_content");

                    b.Property<string>("AnswerValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_value");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("MatchingPosition")
                        .HasColumnType("integer")
                        .HasColumnName("matching_position");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answers_question_id");

                    b.ToTable("answers", "cat");

                    b.HasData(
                        new
                        {
                            Id = "c765cb93-f518-45ca-8372-0aa288f9d5b3",
                            AllowShuffle = true,
                            AnswerContent = "under",
                            AnswerValue = "false",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(9959),
                            MatchingPosition = 0,
                            QuestionId = "0b8d4bf8-635d-402f-a28a-41b8c344c33d"
                        },
                        new
                        {
                            Id = "d079864f-2995-4357-8d3f-2784a1bffd23",
                            AllowShuffle = true,
                            AnswerContent = "in",
                            AnswerValue = "false",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(9964),
                            MatchingPosition = 0,
                            QuestionId = "0b8d4bf8-635d-402f-a28a-41b8c344c33d"
                        },
                        new
                        {
                            Id = "687e87df-d57a-4578-86df-3dc1938bfabb",
                            AllowShuffle = true,
                            AnswerContent = "after",
                            AnswerValue = "true",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(9967),
                            MatchingPosition = 0,
                            QuestionId = "0b8d4bf8-635d-402f-a28a-41b8c344c33d"
                        },
                        new
                        {
                            Id = "35531282-6772-413c-99a0-57c8a7059c49",
                            AllowShuffle = true,
                            AnswerContent = "over",
                            AnswerValue = "true",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(9970),
                            MatchingPosition = 0,
                            QuestionId = "0b8d4bf8-635d-402f-a28a-41b8c344c33d"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Level", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_levels");

                    b.ToTable("levels", "cat");

                    b.HasData(
                        new
                        {
                            Id = "7b70ddba-b8b0-42f8-961e-20785f0f564b",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5484),
                            Description = "Knowledge",
                            Name = "Knowledge"
                        },
                        new
                        {
                            Id = "abdbeff3-9840-4200-a8c6-e1f1e3d0c428",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5490),
                            Description = "Comprehension",
                            Name = "Comprehension"
                        },
                        new
                        {
                            Id = "c363cdf9-cadb-4090-a03d-43c4f5303e9b",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5492),
                            Description = "Application",
                            Name = "Application"
                        },
                        new
                        {
                            Id = "0293d928-8ec7-4bf7-82cf-894235220294",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5496),
                            Description = "Analysis",
                            Name = "Analysis"
                        },
                        new
                        {
                            Id = "d3dd9e4d-0170-45ce-9ee2-78b9f8770e38",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5499),
                            Description = "Synthesis",
                            Name = "Synthesis"
                        },
                        new
                        {
                            Id = "999abd49-0b6d-4fd0-81f4-0a419b71bac8",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(5502),
                            Description = "Evaluation",
                            Name = "Evaluation"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("LevelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level_id");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_content");

                    b.Property<string>("QuestionTypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_type_id");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("boolean")
                        .HasColumnName("shuffle_answers");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("LevelId")
                        .HasDatabaseName("ix_questions_level_id");

                    b.HasIndex("QuestionTypeId")
                        .HasDatabaseName("ix_questions_question_type_id");

                    b.ToTable("questions", "cat");

                    b.HasData(
                        new
                        {
                            Id = "0b8d4bf8-635d-402f-a28a-41b8c344c33d",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(8614),
                            LevelId = "7b70ddba-b8b0-42f8-961e-20785f0f564b",
                            QuestionContent = "Just think,____2 years' time, we'll be 20 both.",
                            QuestionTypeId = "6f01c413-497a-4745-93d4-4e41d254fdad",
                            ShuffleAnswers = true,
                            UserId = "c4c93c76-e6bf-4608-8e84-dce4a1625fad"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.QuestionType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_question_types");

                    b.ToTable("questionTypes", "cat");

                    b.HasData(
                        new
                        {
                            Id = "6f01c413-497a-4745-93d4-4e41d254fdad",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(6164),
                            Description = "Multiple Choice Question",
                            Name = "MCQ"
                        },
                        new
                        {
                            Id = "42fe49d6-44f9-4006-af32-88f20c315023",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(6179),
                            Description = "Fill In Blanks",
                            Name = "FIB"
                        },
                        new
                        {
                            Id = "33ae4edc-9bc7-4201-afda-28d5cfa4e84e",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(6183),
                            Description = "Match The Following",
                            Name = "MTF"
                        },
                        new
                        {
                            Id = "01fd1f9c-78c4-41b1-a379-1229eba16808",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 802, DateTimeKind.Utc).AddTicks(6186),
                            Description = "Ordering Sequence",
                            Name = "ORD"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", "cat");

                    b.HasData(
                        new
                        {
                            Id = "d1879bda-01dd-43dd-afdd-3e01578e7864",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(397),
                            Description = "Khái niệm và quy tắc giao thông đường bộ",
                            Name = "1"
                        },
                        new
                        {
                            Id = "77f517bd-1855-4e0a-ac49-6893a707520c",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(402),
                            Description = "Nghiệp vụ vận tải",
                            Name = "2"
                        },
                        new
                        {
                            Id = "7c99c1ee-a1c8-4e1b-a9a4-a174760e6dc2",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(405),
                            Description = "Văn hóa giao thông và đạo đức người lái xe",
                            Name = "3"
                        },
                        new
                        {
                            Id = "056d3522-078a-4d46-9262-d56ea7e557ea",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(408),
                            Description = "Kỹ thuật lái xe",
                            Name = "4"
                        },
                        new
                        {
                            Id = "f2919aa8-c48b-4311-870f-2ae3c80ac7fe",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(411),
                            Description = "Cấu tạo và sửa chữa",
                            Name = "5"
                        },
                        new
                        {
                            Id = "b97ae130-8c1c-42b6-a47c-4e5e1fc056b6",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(414),
                            Description = "Hệ thống biển báo hiệu đường bộ",
                            Name = "6"
                        },
                        new
                        {
                            Id = "b523c423-79c9-4d29-82ee-aec0ee4db213",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(417),
                            Description = "Các thế sa hình và kỹ năng xử lý tình huống giao thông",
                            Name = "7"
                        },
                        new
                        {
                            Id = "80f521b3-c1d8-42ad-8c04-8e3d93e56fbe",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(419),
                            Description = "Các khái niệm",
                            Name = "8"
                        },
                        new
                        {
                            Id = "64f5b16d-5656-4418-8b40-7cb4c972bdd4",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(424),
                            Description = "Quy tắc giao thông",
                            Name = "9"
                        },
                        new
                        {
                            Id = "244b45f1-fca2-4c6b-9a1f-71d7e44919c5",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(500),
                            Description = "Quy định tốc độ, khoảng cách",
                            Name = "10"
                        },
                        new
                        {
                            Id = "bedbcaa0-fa15-4ee2-89a2-cbab79dd66ca",
                            CreatedDate = new DateTime(2022, 11, 9, 14, 59, 53, 803, DateTimeKind.Utc).AddTicks(504),
                            Description = "Câu hỏi về tình huống mất an toàn giao thông nghiêm trọng (điểm liệt)",
                            Name = "11"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.TagQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_id");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_tag_questions");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_tag_questions_question_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_tag_questions_tag_id");

                    b.ToTable("tag_questions", "cat");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.ExamResult", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.ExamAggregate.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_results_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.QuestionAnswer", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.ExamAggregate.ExamResult", "ExamResult")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ExamResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_answers_exam_results_exam_result_id");

                    b.Navigation("ExamResult");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.QuestionExam", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.ExamAggregate.Exam", "Exam")
                        .WithMany("QuestionExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_exam_exams_exam_id");

                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", "Question")
                        .WithMany("QuestionExams")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_exam_questions_question_id");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.Schedule", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.ExamAggregate.Exam", "Exam")
                        .WithMany("Schedules")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Answer", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.Level", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_levels_level_id");

                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_question_types_question_type_id");

                    b.Navigation("Level");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.TagQuestion", b =>
                {
                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", "Question")
                        .WithMany("TagQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_questions_questions_question_id");

                    b.HasOne("Catalog.Domain.AggregatesModel.QuestionAggregate.Tag", "Tag")
                        .WithMany("TagQuestions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_questions_tags_tag_id");

                    b.Navigation("Question");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.Exam", b =>
                {
                    b.Navigation("ExamResults");

                    b.Navigation("QuestionExams");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.ExamAggregate.ExamResult", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Level", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionExams");

                    b.Navigation("TagQuestions");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Catalog.Domain.AggregatesModel.QuestionAggregate.Tag", b =>
                {
                    b.Navigation("TagQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
